{
  "name": "ai-expert-consensus",
  "version": "2.2.0",
  "description": "Enterprise-grade AI consensus through intelligent multi-model orchestration with learning, caching, and confidence scoring",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/KostasNoreika/mcp-debate-consensus.git"
  },
  "homepage": "https://github.com/KostasNoreika/mcp-debate-consensus#readme",
  "bugs": {
    "url": "https://github.com/KostasNoreika/mcp-debate-consensus/issues"
  },
  "scripts": {
    "start": "node index.js",
    "proxy": "node k-proxy-server.js",
    "setup": "node setup.js",
    "test": "NODE_OPTIONS='--no-warnings --experimental-vm-modules' jest --detectOpenHandles",
    "test:watch": "NODE_OPTIONS='--no-warnings --experimental-vm-modules' jest --watch --detectOpenHandles",
    "test:coverage": "NODE_OPTIONS='--no-warnings --experimental-vm-modules' jest --coverage --detectOpenHandles",
    "test:unit": "NODE_OPTIONS='--no-warnings --experimental-vm-modules' jest tests/unit --detectOpenHandles",
    "test:integration": "NODE_OPTIONS='--no-warnings --experimental-vm-modules' jest tests/integration --detectOpenHandles",
    "test:adapters": "NODE_OPTIONS='--no-warnings --experimental-vm-modules' jest tests/adapters --detectOpenHandles",
    "test:e2e": "NODE_OPTIONS='--no-warnings --experimental-vm-modules' jest tests/e2e --detectOpenHandles",
    "test:mcp": "node test-mcp-client.js",
    "test:models": "./test-consensus.sh",
    "test:confidence": "node test-confidence-scorer.js",
    "test:mcp-confidence": "node test-mcp-confidence.js",
    "test:cache": "node test-cache-direct.js",
    "test:retry": "NODE_OPTIONS='--no-warnings --experimental-vm-modules' jest tests/unit/retry-handler.test.js --detectOpenHandles",
    "test:performance": "node test-performance-tracking.js",
    "test:security": "node test-security.js",
    "test:client": "node client-signing-example.js demo",
    "test:all": "npm run health && npm run test:security && npm test",
    "test:debug": "NODE_OPTIONS='--no-warnings --experimental-vm-modules --inspect-brk' jest --runInBand --detectOpenHandles",
    "test:verbose": "VERBOSE=true NODE_OPTIONS='--no-warnings --experimental-vm-modules' jest --verbose --detectOpenHandles",
    "test:clean": "npm run clean:test && npm test",
    "health": "node health-check.js",
    "install:setup": "node install.js",
    "clean": "rm -rf logs/*.json coverage node_modules package-lock.json",
    "clean:test": "rm -rf coverage temp test.db test.sqlite data/test-performance.db cache/test-* logs/test-*",
    "dev": "NODE_ENV=development node index.js",
    "prod": "NODE_ENV=production node index.js",
    "validate": "node -e \"const { config } = require('./src/config'); try { config.validate(); console.log('✅ Configuration is valid'); } catch (e) { console.error('❌ Configuration validation failed:', e.message); process.exit(1); }\"",
    "config:show": "node -e \"const { config } = require('./src/config'); console.log(JSON.stringify(config.getAll(), null, 2));\"",
    "config:check": "node -e \"const { config } = require('./src/config'); console.log('Environment:', process.env.NODE_ENV || 'development'); console.log('Config loaded successfully'); console.log('Models available:', Object.keys(config.get('models')));\"",
    "security:test": "node test-security.js",
    "security:generate-secret": "node client-signing-example.js generate-secret",
    "security:status": "curl -s http://localhost:3457/security/status | json_pp",
    "learning:test": "node test-learning-system.js",
    "learning:report": "node -e \"import('./src/learning/learning-system.js').then(async ({LearningSystem}) => {const ls = new LearningSystem(); await ls.initialize(); const report = await ls.generateComprehensiveReport(); console.log('📋 Learning report generated successfully'); });\"",
    "learning:status": "node -e \"import('./src/learning/learning-system.js').then(async ({LearningSystem}) => {const ls = new LearningSystem(); await ls.initialize(); const status = ls.getQuickStatus(); console.log('🧠 Learning System Status:', JSON.stringify(status, null, 2)); });\"",
    "learning:reset": "node -e \"import('./src/learning/learning-system.js').then(async ({LearningSystem}) => {const ls = new LearningSystem(); await ls.initialize(); await ls.resetLearningData(); console.log('🔄 Learning data reset complete'); });\""
  },
  "keywords": [
    "mcp",
    "llm",
    "consensus",
    "synthesis",
    "claude",
    "openrouter",
    "security",
    "hmac",
    "authentication"
  ],
  "author": "Your Name",
  "license": "MIT",
  "type": "module",
  "dependencies": {
    "@modelcontextprotocol/sdk": "^1.19.1",
    "axios": "^1.12.2",
    "dotenv": "^17.2.3",
    "express": "^5.1.0",
    "jest-junit": "^16.0.0",
    "node-fetch": "^3.3.2",
    "sqlite3": "^5.1.7",
    "uuid": "^13.0.0",
    "winston": "^3.18.3"
  },
  "engines": {
    "node": ">=18.0.0"
  },
  "devDependencies": {
    "@babel/core": "^7.28.4",
    "@babel/preset-env": "^7.28.3",
    "@types/jest": "^30.0.0",
    "jest": "^30.1.3",
    "jest-environment-node": "^30.2.0",
    "supertest": "^7.1.4",
    "ts-jest": "^29.4.1"
  }
}
